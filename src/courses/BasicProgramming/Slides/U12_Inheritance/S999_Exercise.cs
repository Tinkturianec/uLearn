namespace uLearn.Courses.BasicProgramming.Slides.U12_Inheritance
{
    [Slide("Практика", "{AF6C1842-1792-49E5-B5FE-B7838DA6199C}")]
	public class S099_Exercise
	{
		/*
		## Диггер

		![Диггер](Digger.png)

		Сейчас в это трудно поверить, но когда-то Digger был одной из самых продвинутых и интересных компьютерных игр. В этом блоке задач мы воссоздадим некоторое его подмножество с помощью классов.

		Вам предстоит наполнить готовую заготовку игровыми элементами. Каждый элемент должен уметь:

		* Возвращать имя файла, в котором лежит соответствующая ему картинка (например, "Terrain.png")
		* Сообщать приоритет отрисовки. Чем выше приоритет, тем раньше рисуется соответствующий элемент, это важно для анимации.
		* Действовать — возвращать направление перемещения и, если объект во что-то превращается на следующем ходу, то результат превращения.
		* Разрешать столкновения двух элементов в одной клетке.

		Используйте интерфейс ICreature и статические члены класса Game. 

		[Скачать проект](digger.zip)
  
		###Terrain

		Сделайте класс Terrain, реализовав ICreature. Сделайте так, чтобы он ничего не делал.

		Инициализируйте карту в Game.CreateMap().

		###Digger

		Сделайте класс Digger, реализовав ICreature. 

		Сделайте так, чтобы диггер шагал в разные стороны в зависимости от нажатой клавиши (Game.KeyPressed). Убедитесь, что диггер не покидает пределы игрового поля.

		Сделайте так, чтобы земля исчезала в тех местах, где прошел диггер.

		### Мешки и золото

		Сделайте так, чтобы мешок, не лежащий на земле, начинал лететь вниз и разбивался, вновь достигнув Terrain или конца экрана, превращаясь в золото.

		Сделайте так, чтобы диггер собирал золото и зарабатывал очки.

		Сделайте так, чтобы летящий мешок убивал Диггера.

		### Монстры

		Сделайте монстров, которые бы бегали за Диггером и убивали его, если догонят.

		Монстры должны также гибнуть от летящих мешков.
		*/
	}
}